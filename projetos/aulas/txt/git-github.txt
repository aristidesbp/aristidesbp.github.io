####################
# COMANDOS LINUX  ##
####################
## para mostrar conteudo da pasta:
ls -a
## para criar pasta
mkdir nome
## para criar arquivo
nano nome
## entrar na pasta
cd nome
## mover pasta ou arquivo (./pasta anterior)
mv psta
## volta para pasta anterior
cd ..
## apagar pasta/arquivo
rm -rf nome



##################################################################################
# ‚ú®‚ú®‚ú®‚ú®‚ú®‚ú® TUTORIAL BONUS TRABALHANDO COM GIT-GITHUB: ‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
##################################################################################
---
### Se esquecer qualquer comando, use:
git --help

### pesquise por comando especifico :
git <comando> --help

# usado para limpar a tela
clear

# Cria uma nova pasta chamada "meu-git"
mkdir meu-git

# Entra na pasta rec√©m-criada                       
cd meu-git 

# verificar todas as pastas/arquivo do repositorio ate oucultos                      
ls -a

# Inicializa o reposit√≥rio Git local (caso n√£o tenha vindo com o clone)
git init

# Configurar a pasta como segura (evita erros de seguran√ßa)                               
git config --global --add safe.directory "$(pwd)"

# Lista todas as configura√ß√µes ativas 
git config --list

# Configurar nome de usu√°rio
git config --global user.name "Seu Nome"

# Configurar email do GitHub
git config --global user.email "seu@email.com"


####################################
# üíª Adicione a chave SSH no GitHub
####################################

# Mostrar a chave p√∫blica para adicionar no GitHub
cat ~/.ssh/id_ed25519.pub

# Gerar nova chave SSH (caso ainda n√£o tenha)
ssh-keygen -t ed25519 -C "seu@email.com"

# Iniciar o agente ssh
eval "$(ssh-agent -s)" ssh-add ~/.ssh/id_ed25519

----------------------------------------------------
1. Acesse: https://github.com](https://github.com
2. Fa√ßa login na sua conta
3. No canto superior direito, clique na sua foto de perfil ‚Üí **Settings**
4. V√° at√© **SSH and GPG keys** (ou "Chaves SSH e GPG")
5. Clique em **New SSH key**
6. Em **Title**, coloque um nome (ex: ‚ÄúMeu notebook‚Äù)
7. Em **Key**, cole a chave p√∫blica copiada (noterminal digite)
----------------------------------------------------

# üß™ Teste a conex√£o com o GitHub
# Se tudo estiver certo, voc√™ ver√°:
# Hi SEU_USUARIO! You've successfully authenticated..
ssh -T git@github.com


# Execute o comando abaixo no terminal para ver como o Git est√° se conectando ao GitHub:
## NOMAL
# origin	https://github.com/aristidesbp/aristidesbp.github.io.git (fetch)
# origin	https://github.com/aristidesbp/aristidesbp.github.io.git (push)
## SSH
# origin	git@github.com:aristidesbp/aristidesbp.github.io (fetch)
# origin	git@github.com:aristidesbp/aristidesbp.github.io (push)
git remote -v


# Troque a URL remota para usar SSH
git remote set-url origin git@github.com:usuario/repositorio.git

## üß™ Teste de conex√£o com GitHub via SSH (opcional)
ssh -T git@github.com



########################################
# üíª Clonando um repositorio do  GitHub
########################################
## Clona o reposit√≥rio com chave SSH
git clone git@github.com:usuario/repositorio.git
## verificar todas as pastas/arquivo do repositorio ate oucultos   
ls -a
## vai para dentro da pasta do repositorio
cd nome-do-reositorio
## verificar todas as pastas/arquivo do repositorio ate oucultos   
ls -a
## Mostra os reposit√≥rios remotos configurados
git remote -v 
## Busca atualiza√ß√µes sem aplicar
git fetch 
## Sincroniza com o reposit√≥rio remoto (branch main)
git pull origin main 
## Mostra o hist√≥rico de forma resumida (1 linha por commit)
git log --oneline
## Exibe hist√≥rico de todos os commits com hash, autor e data (PARA SAIR DIGITE: q) 
git log 
## Mostra o status atual dos arquivos (modificados, novos, deletados)
git status 

##############################
# üå± BRANCHES (RAMIFICA√á√ïES) 
##############################
git branch
# Lista todas as branches (ramifica√ß√µes)
git checkout -b novaBranch numero-do-commit
# Criar uma branch a partir do commit 
# ex:: git checkout -b novaBranch  2ad9347bba64542687c6
git branch nome-da-branch
# Cria uma nova branch com o nome informado
git checkout -b nova-branch
# Cria e j√° muda para a nova branch
git stash
# Salva temporariamente altera√ß√µes n√£o commitadas (√∫til para trocar de branch)
git checkout main 
# Volta para a branch principal
git checkout nome-da-branch
# Troca para a branch escolhida
git stash apply
# Recupera altera√ß√µes salvas com `stash`
git merge especificar-nome-da-branch
# Une a branch especificada com a atual
git branch -d nome-da-branch
# Deleta a branch (caso j√° tenha sido mesclada)
git merge nova-branch 
# Junta as altera√ß√µes da branch de trabalho com a main
git pull origin main
# Garante que est√° atualizado com o reposit√≥rio remoto


########################################################################
# Criar um novo arquivo de texto com a frase "ola mundo conectado"
########################################################################
nano nome-do-arquivo.txt
# Cria um novo arquivo com a mensagem
# CONTR+S  CONTR+X para salvar depois de alterar
git add nome-do-arquivo.txt
# Adiciona o arquivo para a √°rea de staging


###################################################
## üìù TRABALHANDO COM COMMIT (DIGITE "Q" PARA SAIR)
###################################################
git add nome-do-arquivo.ext
# Adiciona um arquivo espec√≠fico para a √°rea de staging
git add .
# Adiciona TODOS os arquivos modificados para o commit
git commit -m "Mensagem clara e objetiva"
# Cria um commit com a mensagem entre aspas
git commit -am "Mensagem"
# Adiciona e comita arquivos rastreados (n√£o funciona com novos arquivos)
git diff
# Mostra as diferen√ßas entre o c√≥digo atual e o √∫ltimo commit
git commit -m "Adiciona mensagem de conex√£o" 
# Faz o commit com a mensagem
git show
# Mostra detalhes do √∫ltimo commit
git blame nome-do-arquivo
# Mostra linha por linha quem modificou o qu√™ (√≥timo para rastrear bugs)
git tag -a v1.0 -m "Vers√£o 1.0"
# Cria uma tag de vers√£o


###########################
## üßπ CORRE√á√ïES E AJUSTES
###########################
git reset nome-do-arquivo
# Remove o arquivo da √°rea de staging (antes do commit)
git reset --hard HEAD
# Remove todas as altera√ß√µes e volta ao √∫ltimo commit
git clean -f
# Remove arquivos n√£o rastreados (novos arquivos que n√£o foram adicionados)
git revert <id-do-commit>
# Reverte um commit espec√≠fico sem apagar o hist√≥rico



############################################
## üì§   RECEBENDO E ENVIANDO PARA O GITHUB 
############################################
# Conecta seu reposit√≥rio local ao reposit√≥rio remoto via SSH
git remote add origin git@github.com:usuario/repositorio.git

# Busca atualiza√ß√µes do reposit√≥rio remoto (mas n√£o aplica)
git fetch

# Aplica as atualiza√ß√µes buscadas com `git fetch`
git merge

# Baixa altera√ß√µes do GitHub para seu projeto local
git pull

##  Atualizar seu reposit√≥rio local com o que est√° no GitHub:
git pull origin main --rebase

# Envia o reposit√≥rio local para o GitHub (main = branch principal)
git push -u origin main



###########################################################################
# TUTORIAL: COMO RECUPERAR ARQUIVOS EXCLU√çDOS NO GIT
# AUTOR: Aristidesbp
# OBJETIVO: Localizar e restaurar arquivos deletados em um reposit√≥rio Git
# OBS: Este tutorial assume que voc√™ est√° dentro do reposit√≥rio local.
############################################################################
# ETAPA 1 ‚Äî LOCALIZAR ARQUIVOS DELETADOS
# Exibe o hist√≥rico de commits com resumo das altera√ß√µes,
# e filtra SOMENTE commits que deletaram arquivos.
# DICA: Use a tecla Q para sair da visualiza√ß√£o do log quando quiser.
git log --diff-filter=D --summary

# para buscar especificamente um arquivo que voc√™ quer recuperar:
# Neste exemplo, buscamos o arquivo "editor-de-txt.html"
git log --summary --name-status | grep -B 10 "editor-de-txt.html"



# O par√¢metro -B 10 mostra as 10 linhas antes da ocorr√™ncia,
# para encontrar o commit completo que removeu o arquivo.

# ETAPA 2 ‚Äî IDENTIFICAR O COMMIT QUE DELETOU O ARQUIVO
# -----------------------------------------------------

# A sa√≠da anterior mostra algo assim:

# commit 7477572b4f232ee774236f1b58f510d57d0f7de9
# Author: aristidesbp <aristidesbp@gmail.com>
# Date:   Thu May 22 10:01:41 2025 -0300
# Mensagem: atualizarS
# D	editor-de-txt.html

# Anote o HASH DO COMMIT (exemplo acima: 7477572b4f232ee774236f1b58f510d57d0f7de9)

# ETAPA 3 ‚Äî VERIFICAR QUAIS OUTROS ARQUIVOS FORAM EXCLU√çDOS NESSE COMMIT
# -----------------------------------------------------------------------

# Agora voc√™ pode usar o comando abaixo para ver todos os arquivos DELETADOS no mesmo commit:
git show --name-status --diff-filter=D 7477572b4f232ee774236f1b58f510d57d0f7de9

# Exemplo de sa√≠da esperada:
# D	editor-de-txt.html
# D	script-antigo.js
# D	css/velho-style.css

# ETAPA 4 ‚Äî RECUPERAR UM ARQUIVO ESPEC√çFICO DO COMMIT
# -----------------------------------------------------

# Para restaurar um arquivo deletado, use o comando:
git checkout <HASH_DO_COMMIT>^ -- caminho/do/arquivo

# O ^ (circunflexo) indica que queremos o arquivo da vers√£o ANTERIOR ao commit que deletou.

# Exemplo real:
git checkout 7477572b4f232ee774236f1b58f510d57d0f7de9^ -- editor-de-txt.html

# Esse comando recupera o arquivo "editor-de-txt.html" e o adiciona de volta ao diret√≥rio atual.

# ETAPA 5 ‚Äî ADICIONAR E COMMITAR A RESTAURA√á√ÉO
# --------------------------------------------

# Ap√≥s restaurar o arquivo, voc√™ deve adicion√°-lo novamente ao controle de vers√£o:
git add editor-de-txt.html

# Agora salve com um novo commit:
git commit -m "Recuperar arquivo editor-de-txt.html que havia sido deletado"

# PRONTO! O arquivo est√° de volta no seu projeto.

#############################################################
# CONCLUS√ÉO:
# Usando Git, voc√™ pode recuperar QUALQUER arquivo que foi deletado
# em qualquer ponto do hist√≥rico, mesmo que n√£o saiba o commit exato.
# Sempre use git log e git show para investigar o hist√≥rico.
# Lembre-se: o Git guarda tudo. üòâ
#############################################################


#############################################################
# ‚úÖ 1. Voltar temporariamente a um commit (modo detached HEAD)
#############################################################
# Use o comando abaixo para listar o hist√≥rico de commits no (pc):
git log
# Esse modo √© √∫til apenas para explorar um commit antigo sem alterar o hist√≥rico da branch atual.
git checkout <id_do_commit>


Exemplo:

git checkout a1b2c3d

    ‚ö†Ô∏è Neste modo, voc√™ n√£o est√° em nenhuma branch. Se fizer altera√ß√µes aqui, precisar√° criar uma nova branch para n√£o perder seu trabalho.

‚úÖ 2. Voltar permanentemente a um commit (desfazendo commits posteriores)
‚û§ Op√ß√£o A: Reset "soft" ‚Äì mant√©m as altera√ß√µes no stage

git reset --soft <id_do_commit>

‚û§ Op√ß√£o B: Reset "mixed" (padr√£o) ‚Äì mant√©m altera√ß√µes nos arquivos, mas remove do stage

git reset <id_do_commit>

‚û§ Op√ß√£o C: Reset "hard" ‚Äì apaga tudo (perigoso!)

git reset --hard <id_do_commit>

    ‚ö†Ô∏è Aten√ß√£o: Se voc√™ fizer --hard, todo o trabalho feito depois do commit escolhido ser√° perdido, a menos que esteja salvo em algum lugar (como no GitHub ou em um branch separado).

‚úÖ 3. Criar uma nova branch a partir de um commit antigo

Se quiser preservar o hist√≥rico e come√ßar uma nova linha de desenvolvimento a partir de um commit antigo:

git checkout -b nova-branch <id_do_commit>

Exemplo:

git checkout -b teste-antigo a1b2c3d

‚úÖ Como encontrar o ID do commit

Use o comando abaixo para listar o hist√≥rico de commits:

git log

Pressione q para sair da visualiza√ß√£o.
üí° Dica de seguran√ßa:

Antes de usar reset --hard, √© recomendado criar uma branch backup:

git branch backup-antes-do-reset

Assim, voc√™ pode recuperar os commits caso precise.








