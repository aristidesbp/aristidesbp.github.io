#####################################################################################
####################### AUTOMA√á√ÉO GIT E GITHUB   ####################################
#####################################################################################
# Autor: AristidesBP | Fun√ß√£o: Clonar e configurar reposit√≥rio Git automaticamente
# Requisitos: Python 3, Git instalado ou permiss√µes para instalar via terminal

#####################################################################################
###############        PASSO 1: üß† Importa√ß√µes (cabe√ßalho)    #######################
#####################################################################################
import os                     # Para intera√ß√µes com o sistema de arquivos
import subprocess             # Para executar comandos no terminal
import sys                    # Para encerramento do programa e detec√ß√£o de SO
from pathlib import Path      # Para manipula√ß√£o de caminhos multiplataforma

#####################################################################################
###############        PASSO 2: üîÅ Fun√ß√£o para executar comandos    #################
#####################################################################################
def run(cmd, check=True):
    print(f"\nüõ†Ô∏è Executando comando: {cmd}")  # Informa o comando em execu√ß√£o
    result = subprocess.run(cmd, shell=True, check=check, text=True)  # Executa no terminal
    return result

#####################################################################################
###############        PASSO 3: ‚úÖ Verifica se o Git est√° instalado #################
#####################################################################################
def is_git_installed():
    try:
        subprocess.run(["git", "--version"], check=True, stdout=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

#####################################################################################
########## PASSO 4: ‚¨áÔ∏è Instala o Git conforme o sistema detectado ###################
#####################################################################################
def install_git():
    if "com.termux" in os.environ.get("PREFIX", ""):
        print("üì¶ Ambiente Termux detectado. Instalando Git com pkg...")
        run("pkg update && pkg install -y git")
    elif sys.platform.startswith("linux"):
        print("üì¶ Instalando Git via apt...")
        run("sudo apt update && sudo apt install -y git")
    elif sys.platform.startswith("darwin"):
        print("üì¶ Instalando Git via Homebrew...")
        run("brew install git")
    elif sys.platform.startswith("win"):
        print("‚ö†Ô∏è Instala√ß√£o autom√°tica no Windows n√£o suportada. Acesse: https://git-scm.com")
        sys.exit(1)
    else:
        print("‚ùå Sistema operacional n√£o suportado.")
        sys.exit(1)

#####################################################################################
###############        PASSO 5: üß† Fun√ß√£o Principal ###############################
#####################################################################################
def main():
    # Verifica se o Git est√° instalado
    if not is_git_installed():
        print("üîç Git n√£o encontrado. Instalando...")
        install_git()

    # Solicita nome do usu√°rio
    nome = input("üë§ Digite seu nome: ").strip()
    if not nome:
        print("‚ùå Nome inv√°lido!")
        sys.exit(1)

    # Solicita email do usu√°rio
    email = input("üìß Digite seu email: ").strip()
    if not email:
        print("‚ùå Email inv√°lido!")
        sys.exit(1)

    # Solicita URL do reposit√≥rio Git
    repositorio_url = input("üåê Digite a URL do reposit√≥rio Git: ").strip()
    if not repositorio_url:
        print("‚ùå URL inv√°lida!")
        sys.exit(1)

    # Solicita nome da pasta onde ser√° clonado
    pasta = input("üóÇÔ∏è Nome da pasta para o reposit√≥rio: ").strip()
    if not pasta:
        print("‚ùå Nome da pasta inv√°lido!")
        sys.exit(1)

    # Verifica se a pasta j√° existe
    if os.path.exists(pasta):
        print(f"üö´ Erro: A pasta '{pasta}' j√° existe e n√£o est√° vazia. Escolha outro nome ou apague a pasta existente.")
        sys.exit(1)

    # Clona o reposit√≥rio
    run(f"git clone {repositorio_url} {pasta}")

    # Acessa a pasta clonada
    os.chdir(pasta)

    # Configura nome e email no Git local
    run(f"git config user.name \"{nome}\"")
    run(f"git config user.email \"{email}\"")

    print("\n‚úÖ Tudo pronto! Reposit√≥rio clonado e configurado com sucesso!")

#####################################################################################
###############        PASSO 6: Executa se for chamado diretamente ##################
#####################################################################################
if __name__ == "__main__":
    main()

